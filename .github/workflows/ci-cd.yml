name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test

  version:
    name: Bump Version
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: bump
        run: |
          # Get current version
          CURRENT_VERSION=$(cargo pkgid -p rmail | cut -d '#' -f 2)
          echo "Current version: $CURRENT_VERSION"

          # Bump patch version
          cargo set-version --bump patch

          # Get new version
          NEW_VERSION=$(cargo pkgid -p rmail | cut -d '#' -f 2)
          echo "New version: $NEW_VERSION"

          # Commit the version bump
          git add Cargo.toml Cargo.lock
          git commit -m "chore: bump version to $NEW_VERSION"
          git push

          # Set output
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.platform }}
    needs: version
    strategy:
      matrix:
        include:
          - platform: Linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: rmail-linux
            binary: rmail
          - platform: macOS
            os: macos-latest
            target: x86_64-apple-darwin
            artifact: rmail-macos
            binary: rmail
          - platform: Windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: rmail-windows.exe
            binary: rmail.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/${{ matrix.binary }} artifacts/${{ matrix.artifact }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.binary }} artifacts/${{ matrix.artifact }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: artifacts/${{ matrix.artifact }}

  release:
    name: Create Release
    needs: [build, version]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          cp artifacts/rmail-linux/rmail-linux release/
          cp artifacts/rmail-macos/rmail-macos release/
          cp artifacts/rmail-windows.exe/rmail-windows.exe release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: Release v${{ needs.version.outputs.new_version }}
          draft: false
          prerelease: false
          files: |
            release/rmail-linux
            release/rmail-macos
            release/rmail-windows.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
