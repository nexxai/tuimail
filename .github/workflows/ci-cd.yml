name: CI/CD

on:
  push:
    branches:
      - main
    paths:
      - "src/**/*.rs"
      - "tests/**/*.rs"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - ".github/workflows/ci-cd.yml"
  pull_request:
    branches:
      - main
    paths:
      - "src/**/*.rs"
      - "tests/**/*.rs"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - ".github/workflows/ci-cd.yml"

permissions:
  contents: write
  actions: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test

  version:
    name: Manage Version
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Smart Version Management
        id: version
        run: |
          # Check if Cargo.toml was modified in this commit
          if git diff --name-only HEAD~1 HEAD | grep -q "^Cargo.toml$"; then
            echo "Cargo.toml was modified in this commit"
            
            # Check if version line specifically was changed
            if git diff HEAD~1 HEAD Cargo.toml | grep -q "^[+-]version = "; then
              echo "Version was manually updated"
              # Extract the current version from Cargo.toml
              CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
              echo "Using manually set version: $CURRENT_VERSION"
              NEW_VERSION="$CURRENT_VERSION"
              VERSION_BUMPED=false
            else
              echo "Cargo.toml changed but version wasn't - auto-bumping"
              VERSION_BUMPED=true
            fi
          else
            echo "Cargo.toml not modified - auto-bumping version"
            VERSION_BUMPED=true
          fi

          if [ "$VERSION_BUMPED" = "true" ]; then
            # Get current version from Cargo.toml
            CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
            echo "Current version: $CURRENT_VERSION"
            
            # Parse version parts (assuming semantic versioning: major.minor.patch)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            # Bump patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            
            echo "Bumping version to: $NEW_VERSION"
            
            # Update Cargo.toml
            sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
            
            # Update Cargo.lock - find the tuimail package entry and update its version
            sed -i "/^name = \"tuimail\"$/,/^version = / s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.lock
            
            # Commit the version bump (both files)
            git add Cargo.toml Cargo.lock
            git commit -m "chore: bump version to $NEW_VERSION"
            git push
          fi

          echo "Final version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.platform }}
    needs: version
    strategy:
      matrix:
        include:
          - platform: Linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: tuimail-linux
            binary: tuimail
          - platform: macOS
            os: macos-latest
            target: x86_64-apple-darwin
            artifact: tuimail-macos
            binary: tuimail
          - platform: Windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: tuimail-windows.exe
            binary: tuimail.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/${{ matrix.binary }} artifacts/${{ matrix.artifact }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.binary }} artifacts/${{ matrix.artifact }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: artifacts/${{ matrix.artifact }}

  release:
    name: Create Release
    needs: [build, version]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          cp artifacts/tuimail-linux/tuimail-linux release/
          cp artifacts/tuimail-macos/tuimail-macos release/
          cp artifacts/tuimail-windows.exe/tuimail-windows.exe release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: v${{ needs.version.outputs.new_version }}
          draft: false
          prerelease: false
          files: |
            release/tuimail-linux
            release/tuimail-macos
            release/tuimail-windows.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
